Instructoras - Curso Github en Udacity:
	Sarah Spikes: github username -> salogel42
	Caroline Buckey: github username -> cbuckey-uda

Foro del curso: https://discussions.udacity.com/c/standalone-courses/how-to-use-git-and-github

-------------------------------------------------------------------------------------------------------------------
PENDIENTES:
	*Investigar el comando "git diff" para ver las diferencias en los archivos entre commits.
	*Investigar cómo usar "git diff" para ver diferencias de cambios entre las áreas de trabajo git
	 "CURRENT WORKING DIRECTORY"(que se refiere a los archivos modificados en el repositorio actualmente y
	 que no han sido agregados a la "staging area"), "STAGING AREA"(que se refiere a los archivos modificados
	 que se añaden a "una cola" de archivos que serán parte de el siguiente commit pero que aún no se han
	 agregado al commit), y al área de "COMMIT"(que se refiere al último commit ya realizado en el área de
	 trabajo). El propósito de aprender a usar git diff para comparar cambios entre las distintas áreas de
	 trabajo en git, es de revisar y estar concientes de los cambios realizados en dichas áreas para saber
	 cómo se debería proceder con los cambios realizados.
	*Mirar vídeos y leer sobre branch mergin y conflictos al hacer branch merging.
	*Aprender a lidiar con la situación expuesta anteriormente.
	*Investigar sobre password catching, esto sirve con github, de esta forma cuando git se comunica con
	 github, el pass y el nombre del usuario no se tiene que volver a tipear.
-------------------------------------------------------------------------------------------------------------------


*******************************************************************************************************************
Establecer el editor por defecto:
	git config --global core.editor "'/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl' -n -w"
Los siguientes comandos se explicarán después en el curso[PENDIENTE INVESTIGAR]:
	git config --global push.default upstream
	git config --global merge.conflictstyle diff3
*******************************************************************************************************************


-------------------------------------------------------------------------------------------------------------------
LINKS PROPORCIONADOS PARA INVESTIGAR [RECURSOS OPCIONALES DEL CURSO]

Guía de estilos y convenciones al escribir descripciones de commits (Link proporcionado en el curso):
	http://udacity.github.io/git-styleguide/
Información sobre los componentes internos de git y su funcionamiento en general, el siguiente link fue
proporcionado en el curso como una sugerencia en caso de que el alumno quiera investigar sobre cómo se
creaba un id único para cada "commit" que se hace:
	https://git-scm.com/book/en/v2/Git-Internals-Git-Objects
-------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------
[RECURSOS OPCIONALES DEL CURSO]

Herramientas sugeridas en el curso para la creación de diagramas:
	https://www.gliffy.com/
	http://yuml.me/diagram/activity/draw
-------------------------------------------------------------------------------------------------------------------


Para ver las branches actuales se usa el comando:
	git branch
	En este caso se muestra en el output las branches del repositorio y un asterisco en la branch que
	actualmente tendría "checkout", osea, la branch en la que se está trabajando en el momento.
Para cambiar de branch se usa el comando:
	git checkout [nombre de la branch]
	En este caso se cambiaría al espacio de trabajo de la branch a la que se le hace checkout, se entraría
	a la branch y se tendrían los cambios/commits realizados a dicha branch.
Para ver los commits realizados con su respectiva información e ids se usa el el comando:
	git log
	En este caso se obtendría la información del commit y un id único para el commit.
Para dar un vistazo a un commit anterior se usa el comando:
	git checkout [id del commit]
	En este caso se cambiaría al espacio de trabajo del commit elegido. NOTA: Hay que tener en cuenta un
	problema en este caso, existe algo llamado "HEAD"[INVESTIGACIÓN PENDIENDE SOBRE ESTO] que apunta
	al último commit realizado en una determinada branch, cuando se hace checkout a un commit anterior
	se muestra un mensaje de advertencia de "DETACHED FROM HEAD" que significa que se está trabajando
	en un commit que no es "HEAD" y que los cambios hechos en el commit al que se cambió podrían perderse.
	Ej: Si se hace un "git checkout branch" los cambios realizados en el commit viejo en el que estámos
	    haciendo checkout se pierden, porque el espacio de trabajo de cada branch siempre apunta en el
	    último commit realizado "HEAD", se puede imaginar un caso hipotético en el que se hace checkout
	    a un commit anterior y el estádo del espacio de trabajo pasa a ser "DETACHED HEAD", luego hacemos
	    cambios y nos olvidamos de que estámos en "DETACHED HEAD" y por alguna razón hacemos "checkout" a
	    la misma branch o a otra, entonces los cambios quedan descartados, porque la branch a la que se
	    cambia siempre apunta a "HEAD", lo que se podría hacer para solucinar esto es crear una nueva
	    branch y guardar los cambios que se han realizado en la nueva branch, esto se hace en el commit
	    en estado "DETACHED HEAD", se escribe el commando: git checkout -b <nombre de la nueva branch>
	    y este comando hace que se cree una nueva branch y que al mismo tiempo se entre al espacio de
	    trabajo de la misma(el espacio de trabajo de la nueva branch es el commit en el que se esté
	    trabajando), el comando ya mencionado es una atajo que de otra forma habría necesitado de dos
	    comandos "git branch <nombre de la nueva branch> y git checkout <nombre de la nueva branch>"
	    entonces el comando "git checkout -b <nombre de la nueva branch" crea la nueva branch y hace
	    checkout hacia la brach al mismo tiempo. Finalmente se hace un commit con los archivos modificados
	    y de esta forma los cambios no se pierden, los cambios pasan a la nueva branch a la que se tiene
	    alcance a los cambios por medio de "HEAD".

Para agregar una conexión remota con github se escriben los comandos:
	git remote add origin [link https del repositorio creado en github]
	En este caso origin es simplemente el nombre que se le pone al servidor remoto, por
	convención se lo nombra "origin", puesto a que de ahí se hace fetch y push.
	El nombre "origin" simplemente es un identificador que se usa para el repo remoto.
También se puede remover el identificador "origin"(o el nombre que se haya usado) para no tener
conexión con el repositorio remoto con ese identificador. Esto se hace con el siguiente comando:
	git remote remove origin
	En este caso se sigue el siguiente formato: git remote remove [identificador del repo remoto]
	Así es como ya no se tendría conexión al repositorio remoto.
Para ver un la información de los servidores remotos con los que se realiza el fetch y el push se
escribe el comando:
	git remote -v
	En este caso -v es el argumento para "verbose" osea para mostrar la información sobre el
	servidor remoto con el que hemos hecho la conexión.
Para clonar un repositorio remoto se usa el comando:
	git clone [enlance al repositorio remoto]
	En este caso se clonaría el repositorio remoto en nuestro "cwd"(current working directory)
	directorio de trabajo actual, SE DEBE TOMAR EN CUENTA QUE -> al clonar un repositorio
	remoto en local, por defecto/automáticamente se crea una conexión con el repositorio remoto
	que mantiene el nombre que se usa por convención para una conexión con un repositorio
	remoto, esta conexión usa el identificador "origin" por defecto, para comprobarlo se puede
	correr el comando "git remote -v[erbose]" <- (excluir lo escrito en las llaves). Esto debería
	de dar un output con una información sobre el repositorio remoto y desde dónde se hace el
	"fetch" y a dónde se hace el "push".
	[PENDIENTE INVESTIGAR] -> La razón por la que existen conexión remota separada para hacer
				  "fetch" y "pull" aunque por defecto apuntan a la misma conexión
				  remota.

NOTA: Cuando se clona un repositorio remoto a un repositorio local, en el repo clonado que está
en local se crea automáticamente una conexión remota con el repositorio remoto, la conexión usa
el identificador que se usa por convención, la conexión hacía el repo remoto se llama "origin".

NOTA: No se puede usar simplemente el comando "cp" para copiar un repo local a otra ubicación en
local, existe un problema con los metadatos [PENDIENTE INVESTIGAR EL PROBLEMA] y el repositorio
no queda copiado correctamente, se puede usar el comando "scp" o "secure copy" pero al parecer
se tendría un problema con los commits [PENDIENTE INVESTIGAR EL PROBLEMA], lo más indicando es
usar directamente el comando "git clone" para clonar un repo local en otra ubicación local.

NOTA: Hacer un fork de un repositorio en github, crea un clon del repositorio del que se quiere
      hacer fork, directamente en los servidores de github, pero un fork siempre mantiene un
      enlace al desarrollador original.

Para empujar una rama de nuestro repo local hacia el repo remoto "origin" se escribe el comando:
	git push origin master
	En este caso se sigue el formato de git push [nombre del repo remoto] [branch a empujar]
En caso de que nuestro repositorio no se encuentre al día en relación al repositorio remoto, se
debe hacer lo siguiente para "tirar" los cambios del repositorio remoto a nuestro repositorio local:
	git pull origin master
	En este caso se sigue el formato:
	git pull [identificador repo remoto] [branch que se desea tirar del repo remoto al local]

NOTA: Cuando se ha clonado desde en repositorio remoto en local, o cuando se crea una conexión
      desde local a un repositorio remoto, aparte del repositorio clonado en local, se guarda el
      estado de la última interacción hecha con el repositorio remoto, con interacción me refiero
      al último "push" o "pull", después de la interacción se guarda el estado del repo remoto, el
      último commit guarda el identificador del repo remoto que por convención se lo nombre
      "origin" junto al nombre de la branch, ej: origin/master. En el caso de que se llegue a modificar
      el repositorio local y que los cambios se los haga un commit, al correr "git status", saldría
      algo informando que el repositorio local está adelantado por un commit a "origin/master".

      Puede darse el caso de que un repo local tenga un cambio al mismo tiempo que el repositorio
      remoto, en este caso se podría usar el comando "git fetch <identificador de repo remoto>" y
      se tirarían los cambios hechos en el repositorio remoto hacia una branch llamada
      "origin/master", en otras palabras "<identificador/branch>, esta branch con los cambios del
      repositorio remoto permite que se preserven los cambios en el repositorio local y que los
      cambios conflictivos en el remoto simplemente se mantengan separados, luego se puede hacer
      un merge en local con el "origin/master" y el "master", osea la branch que contiene los commits
      conflictivos y que son remotos, se mezcle con la branch local para mezclar ambas en una branch.
      De hecho el comando "git pull" realiza algo similar, es como si realizara un "git fetch origin" y
      luego el comando "git merge master origin/master", esto es exactamente lo que git pull hace, es
      un atajo en git que básicamente hace un fetch hace un fetch y mezcla esta version con master, osea
      con el repo del repo local.
      
      En resumen "git fetch origin" actualizaría el repositorio local con todos los cambios hechos en
      el repositorio remoto, pero ubicados en branches con el identificador de la conexión antepuesto.
      Ej: "origin/master", "origin/branchExperimental".
      Estas branches con los cambios "fetched" que son del repo remoto, pueden compararse con los
      cambios que son el equivalente local de la misma branch.
      Ej: Se podría comparar la branch master local con la master "fetched" desde el remoto de la
      siguiente manera: "git diff origin/master master".
      También se puede ver los logs en dichas branches de la siguiente manera "git log origin/master".
